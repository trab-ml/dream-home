{"version":3,"file":"static/js/726.ea7188ee.chunk.js","mappings":"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","sources":["pages/contact/Contact.js","scroll/useIntersectionObserver.js"],"sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport useIntersectionObserver from \"../../scroll/useIntersectionObserver\";\nimport \"./contact.css\";\n\nconst Contact = React.memo(() => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const onSubmit = (data) => {\n    console.log(data);\n    // rester à envoyer ces données au back\n  };\n \n  const [contactRef, contactFormIsIntersecting] = useIntersectionObserver({\n    threshold: 0,\n  });\n\n  return (\n    <div\n      className={`contactForm-ctn ${\n        contactFormIsIntersecting ? \"show\" : \"hidden\"\n      }`}\n      ref={contactRef}\n    >\n      <h1>Contactez-nous</h1>\n      <form className=\"contactForm\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"item\">\n          <input\n            name=\"name\"\n            type=\"text\"\n            {...register(\"name\", {\n              required: \"Champ requis !\",\n              pattern: {\n                value: /^[a-zA-Z]+( [a-zA-Z]+){0,3}$/,\n                message: \"Nom invalide\",\n              },\n            })}\n            placeholder=\"Votre nom*\"\n          />\n          {errors.name && <p role=\"alert\">{errors.name.message}</p>}\n        </div>\n\n        <div className=\"item\">\n          <input\n            name=\"email\"\n            type=\"email\"\n            {...register(\"email\", {\n              required: \"Champ requis !\",\n              pattern: { value: /^\\S+@\\S+$/i, message: \"Email invalide !\" },\n            })}\n            placeholder=\"Votre email*\"\n          />\n          {errors.email && <p role=\"alert\">{errors.email.message}</p>}\n        </div>\n\n        <div className=\"item\">\n          <textarea\n            name=\"message\"\n            {...register(\"message\", { required: \"Champ requis !\" })}\n            placeholder=\"Votre message*\"\n          />\n          {errors.message && <p role=\"alert\">{errors.message.message}</p>}\n        </div>\n\n        <div className=\"item checkbox-ctn\">\n          <div>\n            <input\n              id=\"checkbox-data\"\n              className=\"checkbox-data\"\n              name=\"checkboxData\"\n              type=\"checkbox\"\n              {...register(\"checkbox-data\", {\n                required: \"Champ requis !\",\n              })}\n            />\n            <span>\n              <label htmlFor=\"checkbox-data\">\n                En soumettant ce formulaire, j'accepte que les informations\n                saisies soient exploitées dans le cadre de la demande\n                d'informations et de la relation commerciale qui peut en\n                découler.\n              </label>\n            </span>\n          </div>\n          {errors.checkboxData && (\n            <p role=\"alert\">{errors.checkboxData.message}</p>\n          )}\n        </div>\n\n        <button type=\"submit\" id=\"submit-btn\" className=\"item\">\n          Envoyer\n        </button>\n      </form>\n    </div>\n  );\n});\n\nexport default Contact;\n","import { useEffect, useRef, useState } from 'react';\n\nconst useIntersectionObserver = (options) => {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const targetRef = useRef(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n    }, options);\n\n    if (targetRef.current) {\n      observer.observe(targetRef.current);\n    }\n\n    return () => {\n      if (targetRef.current) {\n        observer.unobserve(targetRef.current);\n      }\n    };\n  }, [options]);\n\n  return [targetRef, isIntersecting];\n};\n\nexport default useIntersectionObserver;\n"],"names":["React","_useForm","useForm","register","handleSubmit","errors","formState","_useIntersectionObser","useIntersectionObserver","threshold","_useIntersectionObser2","_slicedToArray","contactRef","contactFormIsIntersecting","_jsxs","className","concat","ref","children","_jsx","onSubmit","data","console","log","_objectSpread","name","type","required","pattern","value","message","placeholder","role","email","id","htmlFor","checkboxData","options","_useState","useState","_useState2","isIntersecting","setIsIntersecting","targetRef","useRef","useEffect","observer","IntersectionObserver","_ref","entry","current","observe","unobserve"],"sourceRoot":""}